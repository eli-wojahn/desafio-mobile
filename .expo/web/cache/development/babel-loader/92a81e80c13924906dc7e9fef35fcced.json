{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useFonts, Roboto_400Regular, Roboto_500Medium } from '@expo-google-fonts/roboto';\nimport styles from \"./styles\";\nimport api from \"../../services/api\";\nimport axios from 'axios';\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Flatlist = function Flatlist() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    employees = _useState2[0],\n    setEmployees = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    hasError = _useState6[0],\n    setErrorFlag = _useState6[1];\n  useEffect(function () {\n    var source = axios.CancelToken.source();\n    var url = baseUrl + \"/employees\";\n    var obtemPacientes = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          setIsLoading(true);\n          var response = yield axios.get(url, {\n            cancelToken: source.token\n          });\n          if (response.status === 200) {\n            setEmployees(response.data);\n            setIsLoading(false);\n            return;\n          } else {\n            throw new Error('Falha ao obter lista de pacientes');\n          }\n        } catch (error) {\n          if (axios.isCancel(error)) {\n            console.log('Operação cancelada...');\n          } else {\n            setErrorFlag(true);\n            setIsLoading(false);\n          }\n        }\n      });\n      return function obtemPacientes() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    obtemPacientes();\n    return function () {\n      return source.cancel('Operação cancelada...');\n    };\n  }, []);\n  var _useFonts = useFonts({\n      Roboto_400Regular: Roboto_400Regular,\n      Roboto_500Medium: Roboto_500Medium\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsx(View, {\n    children: _jsx(FlatList, {\n      data: employees,\n      keyExtractor: function keyExtractor(element) {\n        return element.name;\n      },\n      ItemSeparatorComponent: itemSeparator,\n      renderItem: showEmployee\n    })\n  });\n};\nfunction showEmployee(item) {\n  var _item$item = item.item,\n    name = _item$item.name,\n    job = _item$item.job,\n    admission_date = _item$item.admission_date,\n    image = _item$item.image;\n  return _jsx(View, {\n    children: _jsx(TouchableOpacity, {\n      children: _jsxs(View, {\n        style: styles.witheBox2,\n        children: [_jsx(Image, {\n          source: {\n            uri: image\n          },\n          style: {\n            width: 34,\n            height: 34,\n            borderRadius: 32,\n            margin: 10\n          }\n        }), _jsx(Text, {\n          style: {\n            fontFamily: 'Roboto_400Regular',\n            fontSize: 16\n          },\n          children: name\n        }), _jsx(Image, {\n          source: require(\"../../assets/chevron-down.png\"),\n          style: {\n            width: 34,\n            height: 34,\n            margin: 10\n          }\n        })]\n      })\n    })\n  });\n}\nvar itemSeparator = function itemSeparator() {\n  return _jsx(View, {\n    style: styles.separator\n  });\n};\nexport default Flatlist;","map":{"version":3,"names":["React","useState","useEffect","useFonts","Roboto_400Regular","Roboto_500Medium","styles","api","axios","Flatlist","employees","setEmployees","isLoading","setIsLoading","hasError","setErrorFlag","source","CancelToken","url","baseUrl","obtemPacientes","response","get","cancelToken","token","status","data","Error","error","isCancel","console","log","cancel","fontsLoaded","element","name","itemSeparator","showEmployee","item","job","admission_date","image","witheBox2","uri","width","height","borderRadius","margin","fontFamily","fontSize","require","separator"],"sources":["/home/elias/personal/desafio-mobile/src/components/FlatList/flatList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, FlatList, Image, TouchableOpacity, Button } from 'react-native';\nimport { useFonts, Roboto_400Regular, Roboto_500Medium } from '@expo-google-fonts/roboto';\n\nimport styles from './styles';\nimport api from '../../services/api';\n\nimport axios from 'axios';\n\n// const baseUrl = 'http://localhost:3000';\n\nconst Flatlist = () => {\n    const [employees, setEmployees] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [hasError, setErrorFlag] = useState(false);\n\n    useEffect(() => {\n        const source = axios.CancelToken.source();\n        const url = `${baseUrl}/employees`;\n        const obtemPacientes = async () => {\n            try {\n                setIsLoading(true);\n                const response = await axios.get(url, { cancelToken: source.token });\n                if (response.status === 200) {\n                    setEmployees(response.data);\n                    setIsLoading(false);\n                    return;\n                } else {\n                    throw new Error('Falha ao obter lista de pacientes');\n                }\n            } catch (error) {\n                if (axios.isCancel(error)) {\n                    console.log('Operação cancelada...');\n                } else {\n                    setErrorFlag(true);\n                    setIsLoading(false);\n                }\n            }\n        };\n        obtemPacientes();\n        return () => source.cancel('Operação cancelada...');\n    }, []);\n\n    let [fontsLoaded] = useFonts({\n        Roboto_400Regular,\n        Roboto_500Medium\n    });\n\n    if (!fontsLoaded) {\n        return null;\n    }\n    return (\n        <View>\n            <FlatList\n                data={employees}\n                keyExtractor={element => element.name}\n                ItemSeparatorComponent={itemSeparator}\n                renderItem={showEmployee}\n            />\n        </View>\n    );\n};\n\n\n\n\nfunction showEmployee(item) {\n    const { name, job, admission_date, image } = item.item;\n\n    return (\n        <View >\n            <TouchableOpacity>\n                <View style={styles.witheBox2}>\n                    <Image\n                        source={{ uri: image }}\n                        style={{ width: 34, height: 34, borderRadius: 32, margin: 10 }}\n                    />\n                    <Text style={{ fontFamily: 'Roboto_400Regular', fontSize: 16 }}>{name}</Text>\n                    <Image\n                        source={(require('../../assets/chevron-down.png'))}\n                        style={{ width: 34, height: 34, margin: 10 }}\n                    />\n                </View>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\nconst itemSeparator = () => {\n    return <View style={styles.separator}></View>\n}\n\n\nexport default Flatlist;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}