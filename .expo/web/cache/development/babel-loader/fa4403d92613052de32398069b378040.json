{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useFonts, Roboto_400Regular, Roboto_500Medium } from '@expo-google-fonts/roboto';\nimport styles from \"./styles\";\nimport api from \"../../services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Flatlist = function Flatlist() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    employees = _useState2[0],\n    setEmployees = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    shouldShow = _useState4[0],\n    setShouldShow = _useState4[1];\n  useEffect(function () {\n    api.get(\"/employees\").then(function (response) {\n      setEmployees(response.data);\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  }, []);\n  var _useFonts = useFonts({\n      Roboto_400Regular: Roboto_400Regular,\n      Roboto_500Medium: Roboto_500Medium\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsx(View, {\n    children: _jsx(FlatList, {\n      data: employees,\n      keyExtractor: function keyExtractor(element) {\n        return element.name;\n      },\n      ItemSeparatorComponent: itemSeparator,\n      renderItem: showEmployee\n    })\n  });\n  console.log(employees);\n};\nfunction showEmployee(item) {\n  var _item$item = item.item,\n    name = _item$item.name,\n    job = _item$item.job,\n    admission_date = _item$item.admission_date,\n    image = _item$item.image;\n  return _jsxs(View, {\n    children: [_jsx(Button, {\n      onPress: function onPress() {\n        return setShouldShow(!shouldShow);\n      },\n      title: \"aperta\"\n    }), _jsx(TouchableOpacity, {\n      children: _jsxs(View, {\n        style: styles.witheBox2,\n        children: [_jsx(Image, {\n          source: {\n            uri: image\n          },\n          style: {\n            width: 34,\n            height: 34,\n            borderRadius: 32,\n            margin: 10\n          }\n        }), _jsx(Text, {\n          style: {\n            fontFamily: 'Roboto_400Regular',\n            fontSize: 16\n          },\n          children: name\n        }), _jsx(Image, {\n          source: require(\"../../assets/chevron-down.png\"),\n          style: {\n            width: 34,\n            height: 34,\n            margin: 10\n          }\n        })]\n      })\n    }), shouldShow ? _jsx(Text, {\n      children: \"MOSTRANDO\"\n    }) : null]\n  });\n}\nvar itemSeparator = function itemSeparator() {\n  return _jsx(View, {\n    style: styles.separator\n  });\n};\nexport default Flatlist;","map":{"version":3,"names":["React","useState","useEffect","useFonts","Roboto_400Regular","Roboto_500Medium","styles","api","Flatlist","employees","setEmployees","shouldShow","setShouldShow","get","then","response","data","catch","error","console","log","fontsLoaded","element","name","itemSeparator","showEmployee","item","job","admission_date","image","witheBox2","uri","width","height","borderRadius","margin","fontFamily","fontSize","require","separator"],"sources":["/home/elias/personal/desafio-mobile/src/components/FlatList/flatList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, FlatList, Image, TouchableOpacity, Button } from 'react-native';\nimport { useFonts, Roboto_400Regular, Roboto_500Medium } from '@expo-google-fonts/roboto';\n\nimport styles from './styles';\nimport api from '../../services/api';\n\nconst Flatlist = () => {\n    const [employees, setEmployees] = useState([]);\n\n    const [shouldShow, setShouldShow] = useState(true);\n\n    useEffect(() => {\n        api.get(\"/employees\").then((response) => {\n            // console.log(response.data);\n            setEmployees(response.data);\n        }).catch(error => console.log(error))\n    }, []);\n\n    let [fontsLoaded] = useFonts({\n        Roboto_400Regular,\n        Roboto_500Medium\n    });\n\n    if (!fontsLoaded) {\n        return null;\n    }\n    return (\n        <View>\n            <FlatList\n                data={employees}\n                keyExtractor={element => element.name}\n                ItemSeparatorComponent={itemSeparator}\n                renderItem={showEmployee}\n            />\n        </View>\n    );\n    console.log(employees);\n};\n\n\n\n\nfunction showEmployee(item) {\n    const { name, job, admission_date, image } = item.item\n\n    return (\n        <View >\n            <Button\n                onPress={() => setShouldShow(!shouldShow)}\n                title=\"aperta\"\n            />\n            <TouchableOpacity\n            >\n                <View style={styles.witheBox2}>\n                    <Image\n                        source={{ uri: image }}\n                        style={{ width: 34, height: 34, borderRadius: 32, margin: 10 }}\n                    />\n                    <Text style={{ fontFamily: 'Roboto_400Regular', fontSize: 16 }}>{name}</Text>\n                    {/* <Text style={{ fontFamily: 'Roboto_400Regular' }}>V</Text> */}\n                    <Image\n                        source={(require('../../assets/chevron-down.png'))}\n                        style={{ width: 34, height: 34, margin: 10 }}\n                    />\n                </View>\n            </TouchableOpacity>\n            {shouldShow ?\n        (\n        <Text>MOSTRANDO</Text>\n        ) : null}\n        </View>\n    )\n}\n\nconst itemSeparator = () => {\n    return <View style={styles.separator}></View>\n}\n\n\nexport default Flatlist;\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnD,SAASC,QAAQ,EAAEC,iBAAiB,EAAEC,gBAAgB,QAAQ,2BAA2B;AAEzF,OAAOC,MAAM;AACb,OAAOC,GAAG;AAA2B;AAAA;AAErC,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,GAAS;EACnB,gBAAkCP,QAAQ,CAAC,EAAE,CAAC;IAAA;IAAvCQ,SAAS;IAAEC,YAAY;EAE9B,iBAAoCT,QAAQ,CAAC,IAAI,CAAC;IAAA;IAA3CU,UAAU;IAAEC,aAAa;EAEhCV,SAAS,CAAC,YAAM;IACZK,GAAG,CAACM,GAAG,CAAC,YAAY,CAAC,CAACC,IAAI,CAAC,UAACC,QAAQ,EAAK;MAErCL,YAAY,CAACK,QAAQ,CAACC,IAAI,CAAC;IAC/B,CAAC,CAAC,CAACC,KAAK,CAAC,UAAAC,KAAK;MAAA,OAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAAA,EAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EAEN,gBAAoBf,QAAQ,CAAC;MACzBC,iBAAiB,EAAjBA,iBAAiB;MACjBC,gBAAgB,EAAhBA;IACJ,CAAC,CAAC;IAAA;IAHGgB,WAAW;EAKhB,IAAI,CAACA,WAAW,EAAE;IACd,OAAO,IAAI;EACf;EACA,OACI,KAAC,IAAI;IAAA,UACD,KAAC,QAAQ;MACL,IAAI,EAAEZ,SAAU;MAChB,YAAY,EAAE,sBAAAa,OAAO;QAAA,OAAIA,OAAO,CAACC,IAAI;MAAA,CAAC;MACtC,sBAAsB,EAAEC,aAAc;MACtC,UAAU,EAAEC;IAAa;EAC3B,EACC;EAEXN,OAAO,CAACC,GAAG,CAACX,SAAS,CAAC;AAC1B,CAAC;AAKD,SAASgB,YAAY,CAACC,IAAI,EAAE;EACxB,iBAA6CA,IAAI,CAACA,IAAI;IAA9CH,IAAI,cAAJA,IAAI;IAAEI,GAAG,cAAHA,GAAG;IAAEC,cAAc,cAAdA,cAAc;IAAEC,KAAK,cAALA,KAAK;EAExC,OACI,MAAC,IAAI;IAAA,WACD,KAAC,MAAM;MACH,OAAO,EAAE;QAAA,OAAMjB,aAAa,CAAC,CAACD,UAAU,CAAC;MAAA,CAAC;MAC1C,KAAK,EAAC;IAAQ,EAChB,EACF,KAAC,gBAAgB;MAAA,UAEb,MAAC,IAAI;QAAC,KAAK,EAAEL,MAAM,CAACwB,SAAU;QAAA,WAC1B,KAAC,KAAK;UACF,MAAM,EAAE;YAAEC,GAAG,EAAEF;UAAM,CAAE;UACvB,KAAK,EAAE;YAAEG,KAAK,EAAE,EAAE;YAAEC,MAAM,EAAE,EAAE;YAAEC,YAAY,EAAE,EAAE;YAAEC,MAAM,EAAE;UAAG;QAAE,EACjE,EACF,KAAC,IAAI;UAAC,KAAK,EAAE;YAAEC,UAAU,EAAE,mBAAmB;YAAEC,QAAQ,EAAE;UAAG,CAAE;UAAA,UAAEd;QAAI,EAAQ,EAE7E,KAAC,KAAK;UACF,MAAM,EAAGe,OAAO,iCAAmC;UACnD,KAAK,EAAE;YAAEN,KAAK,EAAE,EAAE;YAAEC,MAAM,EAAE,EAAE;YAAEE,MAAM,EAAE;UAAG;QAAE,EAC/C;MAAA;IACC,EACQ,EAClBxB,UAAU,GAEf,KAAC,IAAI;MAAA;IAAA,EAAiB,GAClB,IAAI;EAAA,EACD;AAEf;AAEA,IAAMa,aAAa,GAAG,SAAhBA,aAAa,GAAS;EACxB,OAAO,KAAC,IAAI;IAAC,KAAK,EAAElB,MAAM,CAACiC;EAAU,EAAQ;AACjD,CAAC;AAGD,eAAe/B,QAAQ"},"metadata":{},"sourceType":"module"}